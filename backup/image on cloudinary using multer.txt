frontend:-

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../pages/ImageUploader.css'; // Import your CSS file with the styles
import { Image } from 'cloudinary-react'; // Import the Image component from cloudinary-react

const ImageUpload = () => {
  const [image, setImage] = useState(null); // State for uploading image
  const [imageSrc, setImageSrc] = useState(''); // State for fetching image

  const handleImageChange = (e) => {
    setImage(e.target.files[0]);
    console.log('Frontend Image Data : ',e.target.files[0]);
  };

  const handleImageUpload = async (e) => {
    e.preventDefault();

    if (!image) {
      alert('Please select an image.');
      return;
    }

    const formData = new FormData();
    formData.append('file', image);

    try {
      const token = localStorage.getItem('jwtoken');
      if (!token) {
        alert('No token available. Please log in.');
        return;
      }

      const config = {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${token}`,
        },
        withCredentials: true,
      };

      // Update the URL to your backend Cloudinary upload endpoint
      const response = await axios.post('http://localhost:3000/user/cloudinaryUpload', formData, config);

      console.log('Cloudinary response:', response.data);

      alert('Image uploaded successfully');
      setImage(null);
    } catch (error) {
      console.error('Error uploading image:', error);
      alert('Failed to upload image');
    }
  };

  useEffect(() => {
    const fetchImage = async () => {
      try {
        const token = localStorage.getItem('jwtoken');
        if (!token) {
          console.error('No token available. Please log in.');
          return;
        }

        const config = {
          headers: {
            Authorization: `Bearer ${token}`,
          },
          withCredentials: true,
        };

        // Fetch the Cloudinary image URL from your backend
        const response = await axios.get('http://localhost:3000/user/cloudinaryImageData', config);
        console.log("Response for getting image : ", response);
        setImageSrc(response.data.imageUrl);
      } catch (error) {
        console.error('Error fetching image:', error);
      }
    };

    fetchImage();
  }, []); // Empty dependency array ensures the effect runs only once on component mount


  return (
    <div>
      <h1>Image Upload</h1>
      <form onSubmit={handleImageUpload}>
        <input type="file" onChange={handleImageChange} />
        <button type="submit">Upload Image</button>
      </form>

      <h1>Getting Image from Cloudinary</h1>
      <div className="image-container" style={{ width: '300px', height: '200px', border: '2px solid #ccc' }}>
        {imageSrc ? (
          <Image cloudName="do4bxdztz" publicId={imageSrc} width="100%" height="100%"  /> // Replace 'your_cloud_name' with your Cloudinary cloud name
        ) : (
          <p>Loading image...</p>
        )}
      </div>

    </div>
  );
};

export default ImageUpload;
-------------------------------------------------------------------------------


Backend.js:--


For Getting Image


router.get('/cloudinaryImageData', authenticate, async (req, res) => {
  try {
    const userId = req.rootUser._id; // Get the authenticated user's ID
    const user = await User.findOne({ _id: userId });

    if (!user) {
      return res.status(404).json({
        status: 'FAILED',
        message: 'User not found',
      });
    }

    // Assuming user.imageUrl contains the Cloudinary URL of the image
    const imageUrl = user.imageUrl; // Replace with the actual field that stores the Cloudinary URL in your user document

    if (!imageUrl) {
      return res.status(404).json({ error: 'Image URL not found in user data' });
    }

    // Send the Cloudinary image URL as a response
    res.status(200).json({ imageUrl });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

-------------------------------------------------------------------------------

For posting/uploading image on cloudinary-


const cloudinary = require('cloudinary').v2;

// Cloudinary configuration
cloudinary.config({ 
  cloud_name: process.env.cloudinary_name, 
  api_key: process.env.cloudinary_apikey, 
  api_secret: process.env.cloudinary_secretkey 
});

// Use memory storage for uploading files
const storage = multer.memoryStorage();
const upload = multer({ storage });

router.post('/cloudinaryUpload', authenticate, upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    // Convert the Buffer to base64 string
    const base64Image = req.file.buffer.toString('base64');

    const result = await cloudinary.uploader.upload(`data:${req.file.mimetype};base64,${base64Image}`, {
      folder: "shaddi", // Specify the folder in Cloudinary
      use_filename: true, // Use the original filename
    });

    // Save the imageUrl to the User model
    const updatedUser = await User.findByIdAndUpdate(
      req.rootUser._id, // Assuming req.rootUser contains the authenticated user's ID
      { imageUrl: result.secure_url }, // Update imageUrl with the Cloudinary URL
      { new: true } // Return the updated document
    );

    if (!updatedUser) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.status(201).json({ message: 'Image uploaded to Cloudinary and saved to database successfully', imageUrl: result.secure_url });
  } catch (error) {
    console.error('Error uploading image to Cloudinary:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

