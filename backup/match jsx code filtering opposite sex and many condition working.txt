import React, { useContext, useState, useEffect } from 'react';
import { Navigate } from 'react-router-dom';
import { userContext } from '../App';
import '../pages/Match.css';

const Match = () => {
  const { state } = useContext(userContext);
  const [filteredUsers, setFilteredUsers] = useState([]);

  const callGetUserData = async () => {
    try {
      const token = localStorage.getItem('jwtoken');
      const backendURL = 'http://localhost:3000';

      const userDataRes = await fetch(`${backendURL}/user/getData`, {
        method: 'GET',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        credentials: 'include',
      });
      const userData = await userDataRes.json();

      if (userData.gender) {
        const oppositeGender = userData.gender === 'male' ? 'female' : 'male';

        const usersRes = await fetch(`${backendURL}/user/users`, {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
          credentials: 'include',
        });
        const usersData = await usersRes.json();

        const filteredData = usersData.filter(user => {
         
          const countryMatch = user.country && userData.country && user.country.trim().toLowerCase() === userData.country.trim().toLowerCase();
          const stateMatch = user.state && userData.state && user.state.trim().toLowerCase() === userData.state.trim().toLowerCase();
          const cityMatch = user.city && userData.city && user.city.trim().toLowerCase() === userData.city.trim().toLowerCase();
          const professionalMatch = user.professionalStatus && userData.professionalStatus && user.professionalStatus.trim().toLowerCase() === userData.professionalStatus.trim().toLowerCase();
          const oppositeGenderMatch = user.gender && userData.gender && user.gender !== userData.gender;
          

          // Add more criteria as needed

          return oppositeGenderMatch && countryMatch && stateMatch && cityMatch  ;
          
        });

        setFilteredUsers(filteredData);
      } else {
        setFilteredUsers([]);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    if (state) {
      callGetUserData();
    }
  }, [state]);

  console.log('Filtered users:', filteredUsers); // Log filteredUsers data

  if (!state) {
    return <Navigate to="/login" replace />;
  }

  return (
    <div>
      <h2>All Users From MongoDB Database:</h2>
      {filteredUsers.length > 0 ? (
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Gender</th>
              <th>Image</th>
              <th>Caste</th>
              <th>Community</th>
              <th>Country</th>
              <th>State</th>
              <th>City</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {filteredUsers.map((user, index) => (
              <tr key={index}>
                <td>{user.name}</td>
                <td>{user.gender}</td>
                <td><img src={user.image} alt={user.name} style={{ height: "50px", width: "50px" }} /></td>
                <td>{user.caste}</td>
                <td>{user.community}</td>
                <td>{user.country}</td>
                <td>{user.state}</td>
                <td>{user.city}</td>
                <td>
                  <button className='accept' onClick={() => handleEdit(user)}>Send Request</button>
                  <button className='reject' onClick={() => handleDelete(user)}>Ignore</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p>No matching records found.</p>
      )}
    </div>
  );
};

export default Match;
